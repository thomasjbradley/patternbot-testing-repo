(function () {
const patternManifest_1518967974438 = {"commonInfo":{"modulifier":["responsive","images","list-group","embed","media-object","icons","hidden","positioning","nice-lists","forms","buttons","accessibility","print"],"modulifierUrl":"responsive;images;list-group;embed;media-object;icons;hidden;positioning;nice-lists;forms;buttons;accessibility;print","gridifier":[{"prefix":"xs","columns":4,"mq":0},{"prefix":"s","columns":4,"mq":25},{"prefix":"m","columns":4,"mq":38},{"prefix":"l","columns":4,"mq":60}],"gridifierUrl":"xs,4,0,0,0;s,4,25,0,0;m,4,38,1,1;l,4,60,1,1","typografier":[{"mq":0,"fontSize":100,"lineHeight":1.3,"scale":1.067},{"mq":38,"fontSize":110,"lineHeight":1.4,"scale":1.125},{"mq":60,"fontSize":120,"lineHeight":1.5,"scale":1.125},{"mq":90,"fontSize":130,"lineHeight":1.5,"scale":1.125}],"typografierUrl":"0,100,1.3,1.067,0;38,110,1.4,1.125,1;60,120,1.5,1.125,1;90,130,1.5,1.125,1","theme":{"colours":{"primary":[{"name":"--color-primary","namePretty":"Primary","raw":"#f33","hex":"#f33","rgba":"rgba(255, 51, 51, 1)"},{"name":"--color-primary-light","namePretty":"Primary light","raw":"#f99","hex":"#f99","rgba":"rgba(255, 153, 153, 1)"}],"secondary":[{"name":"--color-secondary","namePretty":"Secondary","raw":"#3ff","hex":"#3ff","rgba":"rgba(51, 255, 255, 1)"}],"neutral":[{"name":"--color-neutral","namePretty":"Neutral","raw":"#e2e2e2","hex":"#e2e2e2","rgba":"rgba(226, 226, 226, 1)"}],"accent":[{"name":"--color-accent-bright","namePretty":"Accent bright","raw":"magenta","hex":"#ff00ff","rgba":"rgba(255, 0, 255, 1)"},{"name":"--color-accent-not-as-bright","namePretty":"Accent not as bright","raw":"darkmagenta","hex":"#8b008b","rgba":"rgba(139, 0, 139, 1)"}]},"fonts":{"primary":{"name":"--font-primary","namePretty":"Overpass","raw":"\"Overpass\", sans-serif","weights":{"normal":{"weight":"normal","hasNormal":true,"hasItalic":true},"bold":{"weight":"bold","hasNormal":true,"hasItalic":false}}},"secondary":{"name":"--font-secondary","namePretty":"Source Code Pro","raw":"\"Source Code Pro\", monospace","weights":{"normal":{"weight":"normal","hasNormal":true,"hasItalic":false},"bold":{"weight":"bold","hasNormal":true,"hasItalic":false}}},"accent":[]},"coloursRaw":{"--color-primary":"#f33","--color-primary-light":"#f99","--color-secondary":"#3ff","--color-accent-bright":"magenta","--color-accent-not-as-bright":"darkmagenta","--color-neutral":"#e2e2e2"},"fontsRaw":{"--font-primary":"\"Overpass\", sans-serif","--font-secondary":"\"Source Code Pro\", monospace"}},"readme":{"attributes":{"name":"Super Company","font-url":"https://fonts.googleapis.com/css?family=Overpass:400,400i,700|Source+Code+Pro:400,700","accent-color":"var(--color-accent-not-as-bright)","fontUrl":"https://fonts.googleapis.com/css?family=Overpass:400,400i,700|Source+Code+Pro:400,700","accentColour":"darkmagenta","backgroundColour":"#fff"}},"icons":["brachiosaurus","micropachycephalosaurus","velociraptor"],"interfaceColours":{"primary":0,"opposite":255}},"patternLibFiles":{"commonParsable":{"gridifier":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/common/grid.css","typografier":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/common/type.css","modulifier":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/common/modules.css","theme":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/common/theme.css"},"imagesParsable":{"icons":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/images/icons.svg"},"logos":{"sizeLarge":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/images/logo-256.svg","size64":false,"size32":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/images/logo-32.svg","size16":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/images/logo-16.svg","size16Local":"logo-16.svg","sizeLargeLocal":"logo-256.svg","size32Local":"logo-32.svg"},"patterns":["/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/buttons","/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards","/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/forms","/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/headers","/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/transformers"],"pages":[{"name":"index.html","namePretty":"Home","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/pages/index.html"},{"name":"rescue-application.html","namePretty":"Rescue application","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/pages/rescue-application.html"},{"name":"template-test.html","namePretty":"Template test","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/pages/template-test.html"}]},"userPatterns":[{"name":"buttons","namePretty":"Buttons","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/buttons","html":[{"name":"index","namePretty":"Index","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/buttons/index.html","localPath":"patterns/buttons/index.html"}],"md":[{"name":"readme","namePretty":"Readme","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/buttons/README.md","localPath":"patterns/buttons/README.md"}],"css":[{"name":"main","namePretty":"Main","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/buttons/main.css","localPath":"patterns/buttons/main.css"}]},{"name":"cards","namePretty":"Cards","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards","html":[{"name":"basic-card","namePretty":"Basic card","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards/basic-card.html","localPath":"patterns/cards/basic-card.html","readme":{}},{"name":"icon-card","namePretty":"Icon card","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards/icon-card.html","localPath":"patterns/cards/icon-card.html","readme":{"width":400,"padding":"25px","background-color":"#933","backgroundColour":"#933","interfaceColours":{"primary":255,"opposite":0}}},{"name":"image-card","namePretty":"Image card","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards/image-card.html","localPath":"patterns/cards/image-card.html","readme":{"width":300,"height":600}}],"md":[{"name":"readme","namePretty":"Readme","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards/README.md","localPath":"patterns/cards/README.md"}],"css":[{"name":"main","namePretty":"Main","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/cards/main.css","localPath":"patterns/cards/main.css"}]},{"name":"forms","namePretty":"Forms","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/forms","html":[{"name":"index","namePretty":"Index","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/forms/index.html","localPath":"patterns/forms/index.html"}],"md":[],"css":[{"name":"forms","namePretty":"Forms","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/forms/forms.css","localPath":"patterns/forms/forms.css"}]},{"name":"headers","namePretty":"Headers","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/headers","html":[{"name":"index","namePretty":"Index","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/headers/index.html","localPath":"patterns/headers/index.html","readme":{}}],"md":[{"name":"readme","namePretty":"Readme","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/headers/README.md","localPath":"patterns/headers/README.md"}],"css":[{"name":"main","namePretty":"Main","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/headers/main.css","localPath":"patterns/headers/main.css"}]},{"name":"transformers","namePretty":"Transformers","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/transformers","html":[{"name":"index","namePretty":"Index","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/transformers/index.html","localPath":"patterns/transformers/index.html","readme":{"backgroundColour":"#333","interfaceColours":{"primary":255,"opposite":0}}}],"md":[{"name":"readme","namePretty":"Readme","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/transformers/README.md","localPath":"patterns/transformers/README.md"}],"css":[{"name":"forms","namePretty":"Forms","path":"/Users/thomasjbradley/Dropbox/www/patternbot-test-repos/--all-tester/patterns/transformers/forms.css","localPath":"patterns/transformers/forms.css"}]}]};
/**
 * Patternbot includes
 * https://github.com/thomasjbradley/patternbot-includes
 * @author Thomas J Bradley <hey@thomasjbradley.ca>
 * @copyright 2018 Thomas J Bradley
 * @license MIT
 */
const patternBotIncludes = function (manifest) {
  'use strict';

  const findRootPath = function () {
    const rootMatcher = /\/common\//;
    const allScripts = document.querySelectorAll('script:not([type])');
    let t = allScripts.length, i = 0;

    for (i = 0; i < t; i++) {
      if (rootMatcher.test(allScripts[i].src)) {
        return allScripts[i].src.split(rootMatcher)[0];
        break;
      }
    }
  };

  const getPatternInfo = function (patternElem) {
    let patternInfoJson;

    try {
      patternInfoJson = JSON.parse(patternElem.innerText);
      return patternInfoJson;
    } catch (e) {
      console.group('JSON error in pattern include');
      console.log(patternElem.dataset.pattern);
      console.log(patternElem.innerText);
      console.log(e);
      console.groupEnd();
      return {};
    }
  };

  const getPatternUrl = function (rootPath, patternName) {
    patternName = (patternName.slice(-5) === '.html') ? patternName.slice(0, -5) : patternName;
    return `${rootPath}/patterns/${patternName}.html`;
  };

  const constructPattern = function (rootPath, patternElem) {
    return {
      name: patternElem.dataset.pattern,
      url: getPatternUrl(rootPath, patternElem.dataset.pattern),
      html: false,
      elem: false,
    };
  };

  const htmlStringToElem = function (html) {
    const doc = (new DOMParser()).parseFromString(html, 'text/html');
    return doc.body.firstElementChild;
  };

  const replaceElementValue = function (elem, sel, data) {
    elem.innerText = data;
  };

  const replaceAttributeValue = function (elem, sel, data) {
    const isXlinkAttr = /xlink\:/.test(sel);
    const attr = sel.match(/\[([^\]]+)\]$/)[1];

    if (isXlinkAttr) {
      elem.setAttributeNS('http://www.w3.org/1999/xlink', attr, data);
    } else {
      elem.setAttribute(attr, data);
    }
  };

  const outputPattern = function (patternElem, patternDetails) {
    let patternOutElem, patternData;

    if (!patternDetails.html) return;

    patternOutElem = htmlStringToElem(patternDetails.html);
    patternData = getPatternInfo(patternElem);

    Object.keys(patternData).forEach((sel) => {
      const isAttributeSelector = /\[.*\]/.test(sel);
      const jsSel = sel.replace(/\[.*:/, '[*|');
      const elem = patternOutElem.querySelector(jsSel);

      if (isAttributeSelector) {
        replaceAttributeValue(elem, sel, patternData[sel]);
      } else {
        replaceElementValue(elem, sel, patternData[sel]);
      }
    });

    patternElem.parentNode.replaceChild(patternOutElem, patternElem);
  };

  const showLoadingScreen = function () {

  };

  const hideLoadingScreen = function () {
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {

      });
    });
  };

  const findAllPatternTags = function () {
    return document.querySelectorAll('script[type="application/json"][data-pattern]');
  };

  const constructAllPatterns = function (rootPath, allPatternTags) {
    let allPatterns = {};

    [].forEach.call(allPatternTags, (patternElem) => {
      if (allPatterns[patternElem.dataset.pattern]) return;

      allPatterns[patternElem.dataset.pattern] = constructPattern(rootPath, patternElem);
    });

    return allPatterns;
  };

  const buildPatternFetchPromises = function (allPatternUrls) {
    return allPatternUrls.map((url) => {
      return new Promise((resolve, reject) => {
        fetch(url).then((resp) => {
          if (resp.status >= 200 && resp.status <= 299) {
            return resp.text();
          } else {
            console.group('Download error');
            console.log(resp.url);
            console.log(`Error ${resp.status}: ${resp.statusText}`);
            console.groupEnd();
            return '';
          }
        }).then(function (html) {
          resolve(html);
        }).catch((e) => {
          console.group('Download error');
          console.log(url);
          console.log(e);
          console.groupEnd();
          resolve('');
        });
      });
    });
  };

  const loadAllPatterns = function (allPatterns) {
    let patternUrls = {};
    let allPatternKeys = Object.keys(allPatterns);

    allPatternKeys.forEach((patternKey) => {
      patternUrls[patternKey] = allPatterns[patternKey].url;
    });

    return new Promise((resolve, reject) => {
      Promise.all(buildPatternFetchPromises(Object.values(patternUrls))).then((allPatternsHtml) => {
        allPatternsHtml.forEach((html, i) => {
          allPatterns[allPatternKeys[i]].html = html;
        });
        resolve(allPatterns);
      }).catch((e) => {
        console.group('Pattern load error');
        console.log(e);
        console.groupEnd();
        resolve(allPatterns);
      });
    });
  };

  const renderAllPatterns = function (allPatternTags, allLoadedPatterns) {
    [].forEach.call(allPatternTags, (elem) => {
      outputPattern(elem, allLoadedPatterns[elem.dataset.pattern]);
    });
  };

  const init = function () {
    let rootPath, patternsToLoad, allPatternTags = [], allPatterns = [];

    showLoadingScreen();

    rootPath = findRootPath();
    allPatternTags = findAllPatternTags();
    allPatterns = constructAllPatterns(rootPath, allPatternTags);

    loadAllPatterns(allPatterns).then((allLoadedPatterns) => {
      renderAllPatterns(allPatternTags, allLoadedPatterns);
      hideLoadingScreen();
    }).catch((e) => {
      console.group('Pattern load error');
      console.log(e);
      console.groupEnd();
    });
  };

  init();
};

patternBotIncludes(patternManifest_1518967974438);
}());